// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Company {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  logoUrl   String?
  name      String
  JobPost   JobPost[]
}

model Skills {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String       @unique
  JobPost    JobPost?     @relation(fields: [jobPostId], references: [id])
  jobPostId  String?
  UserSkills UserSkills[]
}

model UserSkills {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  skill            Skills   @relation(fields: [skillsId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
  isVerified       Boolean? @default(false)
  verificationRank Int?     @default(0)
  skillsId         String
  userId           String
}

model JobPost {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String
  description String?
  postedBy    Company       @relation(fields: companyId, references: id)
  companyId   String
  skills      Skills[]
  Application Application[]
}

model Application {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  job       JobPost  @relation(fields: [jobPostId], references: [id])
  userId    String
  jobPostId String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Application   Application[]
  UserSkills    UserSkills[]
  UserTasks     UserTasks[]
  WorkEx        WorkEx[]
  Education     Education[]
}

model WorkEx {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     String
  description String
  role        String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Education {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  institution String
  description String
  course      String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Onboardtask {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  callbackUrl String
  order       Int        @default(0)
  UserTasks   UserTasks? @relation(fields: [userTasksId], references: [id])
  userTasksId String?
}

model UserTasks {
  id     String        @id @default(cuid())
  user   User          @relation(fields: [userId], references: [id])
  tasks  Onboardtask[]
  userId String        @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
